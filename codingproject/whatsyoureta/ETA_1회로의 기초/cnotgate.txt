
  
CNOT 게이트는 두 개의 큐비트에 대한 연산을 수행하는 양자 논리 게이트입니다.

CNOT 게이트에 대해 알아보기 전에, 전통적인 논리 게이트 중 하나인 XOR 게이트를 봅시다.


XOR 게이트의 회로 기호와 진리표
XOR 게이트는 위와 같이 두 비트의 입력을 받아 한 비트의 결과를 반환합니다.

여기서 주목해야할 이 게이트의 특징은 비가역적이라는 것입니다.

예를 들어, 두 입력 비트 
x, y 의 값을 모르는 상황에서 결과가 0이 나왔을 때, 

우리는 이 결과가 x=0,y=0
에서 나왔는지, x=1,y=1
에서 나왔는지 알 수 없습니다.

즉, XOR 게이트는 출력값으로부터 입력값을 알 수 없습니다.

하지만, 이전 글에서 말씀드렸듯이 양자 역학의 유니터리성에 의해

모든 양자 게이트는 유니터리, 즉 가역적이어야합니다.

CNOT 게이트(좌)와 가역적 XOR 게이트(우)
XOR 게이트를 가역적으로 만드는 것은 생각보다 단순합니다.

기존의 XOR 게이트가 비가역적이었던 원인은 근본적으로 입력과 출력의 갯수 차이입니다.

입력은 두 비트로 4가지의 경우의 수가 있지만, 출력은 한 비트로 2가지의 경우만을 나타낼 수 있기 때문입니다.

즉, 입력의 두 비트를 모두 특정하려면 출력이 한 비트 더 필요하다는 것입니다.

실제로, XOR 게이트의 결과가 0이 나왔을 때 x
나 y
 중 하나만 알면 나머지 하나도 알 수 있습니다.

따라서 출력으로 x
의 값을 전달해 주면 가역적인 성질을 가질 수 있게 됩니다.

 

CNOT 게이트는 이러한 가역적 XOR 게이트의 양자 논리 게이트 버전입니다.

이름에서 CNOT은 Controlled NOT을 줄인 것인데, 이유는 다음과 같습니다.


XOR 게이트는 x=1
일 때 y
에 대한 NOT 게이트과 같이 동작한다.
실제로 논리 회로나 컴퓨터 구조 등의 과목에서 다루는 내용인데,

XOR 게이트는 사용하기에 따라 NOT 게이트로 활용할 수 있습니다.

위의 그림와 같이, XOR 게이트에서 x
의 값이 0일 때는 출력으로 y
가 그대로 나오고,

x
의 값이 1일 때는 출력으로 y
에 대해 NOT 게이트를 적용한 값이 나옵니다.


CNOT 게이트도 마찬가지.
CNOT 게이트 또한 가역적 XOR 게이트와 같이 동작하기 때문에 

큐비트 x
의 상태에 따라 y
의 상태의 비트 반전(σz
)을 취한 결과가 나옵니다.

즉, CNOT 게이트는 NOT 게이트처럼 동작할지 여부가 x
의 상태에 의해 제어(Controlled)되는 게이트입니다.

 

앞에서의 XOR 게이트의 사례와 같이, 모든 함수 f
는 가역적인 회로로 나타내어질 수 있습니다.

따라서 양자 회로는 기존의 컴퓨터가 연산할 수 있는 모든 함수를 실행할 수 있음을 알 수 있습니다